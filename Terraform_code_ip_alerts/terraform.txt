[0m[1mdata.archive_file.lambda_function_py[1]: Reading...[0m[0m
[0m[1mdata.archive_file.lambda_function_py[0]: Reading...[0m[0m
[0m[1mdata.archive_file.lambda_function_py[0]: Read complete after 0s [id=d1576cc84f0686a4b42200a22809ca5f91ddbce2][0m
[0m[1mdata.archive_file.lambda_function_py[1]: Read complete after 0s [id=90ac0560061a1d33a883611820d349b5fc3ad750][0m
[0m[1mdata.aws_iam_policy_document.lambda_sns_policy: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.lambda_execution_policy: Reading...[0m[0m
[0m[1mdata.aws_vpc.example: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.lambda_assume_role_policy: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.lambda_cloudwatch_alarms_policy: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.lambda_logs_policy: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.this: Reading...[0m[0m
[0m[1maws_cloudwatch_event_rule.example_rule[0]: Refreshing state... [id=Event][0m
[0m[1mdata.aws_iam_policy_document.lambda_cloudwatch_alarms_policy: Read complete after 0s [id=2034758214][0m
[0m[1mdata.aws_iam_policy_document.lambda_assume_role_policy: Read complete after 0s [id=2131682581][0m
[0m[1mdata.aws_iam_policy_document.lambda_sns_policy: Read complete after 0s [id=1876150304][0m
[0m[1mdata.aws_iam_policy_document.lambda_execution_policy: Read complete after 0s [id=52411703][0m
[0m[1mdata.aws_iam_policy_document.lambda_logs_policy: Read complete after 0s [id=16712114][0m
[0m[1mdata.aws_caller_identity.this: Read complete after 0s [id=837140532212][0m
[0m[1mdata.aws_iam_policy_document.kms_key_policy: Reading...[0m[0m
[0m[1mdata.aws_iam_policy_document.kms_key_policy: Read complete after 0s [id=2330045878][0m
[0m[1mdata.aws_vpc.example: Read complete after 0s [id=vpc-008c6f4cf6fd3583f][0m
[0m[1mdata.aws_subnets.subnet_value: Reading...[0m[0m
[0m[1mdata.aws_subnets.subnet_value: Read complete after 0s [id=ap-south-1][0m
[0m[1mdata.aws_subnet.subnet_value["subnet-0ff9daf46ec3132c1"]: Reading...[0m[0m
[0m[1mdata.aws_subnet.subnet_value["subnet-009b526c6bc03ea15"]: Reading...[0m[0m
[0m[1mdata.aws_subnet.subnet_value["subnet-00b205d34c48f200b"]: Reading...[0m[0m
[0m[1mdata.aws_subnet.subnet_value["subnet-00b205d34c48f200b"]: Read complete after 1s [id=subnet-00b205d34c48f200b][0m
[0m[1mdata.aws_subnet.subnet_value["subnet-009b526c6bc03ea15"]: Read complete after 1s [id=subnet-009b526c6bc03ea15][0m
[0m[1mdata.aws_subnet.subnet_value["subnet-0ff9daf46ec3132c1"]: Read complete after 1s [id=subnet-0ff9daf46ec3132c1][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_cloudwatch_event_rule.example_rule[0m has moved to [1maws_cloudwatch_event_rule.example_rule[0][0m
[0m    resource "aws_cloudwatch_event_rule" "example_rule" {
        id                  = "Event"
        name                = "Event"
        tags                = {}
        [90m# (9 unchanged attributes hidden)[0m[0m
    }

[1m  # aws_cloudwatch_event_rule.example_rule[1][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_rule" "example_rule" {
      [32m+[0m[0m arn                 = (known after apply)
      [32m+[0m[0m description         = "Example EventBridge rule"
      [32m+[0m[0m event_bus_name      = "default"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m name                = "Event"
      [32m+[0m[0m name_prefix         = (known after apply)
      [32m+[0m[0m schedule_expression = "cron(*/2 * * * ? *)"
      [32m+[0m[0m tags_all            = (known after apply)
    }

[1m  # aws_cloudwatch_event_target.ip_usage_checker_target[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "ip_usage_checker_target" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = "Event"
      [32m+[0m[0m target_id      = "ip_usage_checker_lambda_0"
    }

[1m  # aws_cloudwatch_event_target.ip_usage_checker_target[1][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "ip_usage_checker_target" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = "Event"
      [32m+[0m[0m target_id      = "ip_usage_checker_lambda_1"
    }

[1m  # aws_cloudwatch_log_group.lambda_log_group[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda_log_group" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/ip-usage-checker-1"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 0
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = (known after apply)
    }

[1m  # aws_cloudwatch_log_group.lambda_log_group[1][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "lambda_log_group" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/lambda/ip-usage-checker-2"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 0
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags_all          = (known after apply)
    }

[1m  # aws_cloudwatch_metric_alarm.ip_usage_alarm["subnet-009b526c6bc03ea15"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "ip_usage_alarm" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This alarm triggers when IP usage in the subnet exceeds the threshold"
      [32m+[0m[0m alarm_name                            = "IPUsageAlarm-subnet-009b526c6bc03ea15"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanOrEqualToThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "CidrBlock" = "172.31.16.0/20"
          [32m+[0m[0m "SubnetId"  = "subnet-009b526c6bc03ea15"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "IPUsagePercentage"
      [32m+[0m[0m namespace                             = "SubnetIPUsage"
      [32m+[0m[0m period                                = 60
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags_all                              = (known after apply)
      [32m+[0m[0m threshold                             = 0.6
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # aws_cloudwatch_metric_alarm.ip_usage_alarm["subnet-00b205d34c48f200b"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "ip_usage_alarm" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This alarm triggers when IP usage in the subnet exceeds the threshold"
      [32m+[0m[0m alarm_name                            = "IPUsageAlarm-subnet-00b205d34c48f200b"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanOrEqualToThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "CidrBlock" = "172.31.32.0/20"
          [32m+[0m[0m "SubnetId"  = "subnet-00b205d34c48f200b"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "IPUsagePercentage"
      [32m+[0m[0m namespace                             = "SubnetIPUsage"
      [32m+[0m[0m period                                = 60
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags_all                              = (known after apply)
      [32m+[0m[0m threshold                             = 0.6
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # aws_cloudwatch_metric_alarm.ip_usage_alarm["subnet-0ff9daf46ec3132c1"][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_metric_alarm" "ip_usage_alarm" {
      [32m+[0m[0m actions_enabled                       = true
      [32m+[0m[0m alarm_actions                         = (known after apply)
      [32m+[0m[0m alarm_description                     = "This alarm triggers when IP usage in the subnet exceeds the threshold"
      [32m+[0m[0m alarm_name                            = "IPUsageAlarm-subnet-0ff9daf46ec3132c1"
      [32m+[0m[0m arn                                   = (known after apply)
      [32m+[0m[0m comparison_operator                   = "GreaterThanOrEqualToThreshold"
      [32m+[0m[0m dimensions                            = {
          [32m+[0m[0m "CidrBlock" = "172.31.0.0/20"
          [32m+[0m[0m "SubnetId"  = "subnet-0ff9daf46ec3132c1"
        }
      [32m+[0m[0m evaluate_low_sample_count_percentiles = (known after apply)
      [32m+[0m[0m evaluation_periods                    = 1
      [32m+[0m[0m id                                    = (known after apply)
      [32m+[0m[0m metric_name                           = "IPUsagePercentage"
      [32m+[0m[0m namespace                             = "SubnetIPUsage"
      [32m+[0m[0m period                                = 60
      [32m+[0m[0m statistic                             = "Maximum"
      [32m+[0m[0m tags_all                              = (known after apply)
      [32m+[0m[0m threshold                             = 0.6
      [32m+[0m[0m treat_missing_data                    = "notBreaching"
    }

[1m  # aws_iam_role.lambda_execution_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda_execution_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = [
                              [32m+[0m[0m "lambda.amazonaws.com",
                              [32m+[0m[0m "cloudwatch.amazonaws.com",
                            ]
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "lambda-execution-role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # aws_iam_role_policy.lambda_cloudwatch_alarms_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "lambda_cloudwatch_alarms_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "lambda-cloudwatch-alarms-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "cloudwatch:*"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:cloudwatch:*:*:alarm:ip-usage-alarm-*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # aws_iam_role_policy.lambda_execution_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "lambda_execution_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "lambda-execution-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "events:PutTargets",
                          [32m+[0m[0m "events:PutRule",
                          [32m+[0m[0m "ec2:DescribeVpcs",
                          [32m+[0m[0m "ec2:DescribeSubnets",
                          [32m+[0m[0m "cloudwatch:SetAlarmState",
                          [32m+[0m[0m "cloudwatch:PutMetricData",
                          [32m+[0m[0m "cloudwatch:PutMetricAlarm",
                          [32m+[0m[0m "cloudwatch:DescribeAlarms",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # aws_iam_role_policy.lambda_logs_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "lambda_logs_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "lambda-logs-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:PutLogEvents",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:CreateLogGroup",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:logs:*:*:*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # aws_iam_role_policy.lambda_sns_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy" "lambda_sns_policy" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "lambda-sns-policy"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "sns:Subscribe",
                          [32m+[0m[0m "sns:Publish",
                          [32m+[0m[0m "sns:ListSubscriptionsByTopic",
                          [32m+[0m[0m "sns:GetTopicAttributes",
                          [32m+[0m[0m "sns:CreateTopic",
                          [32m+[0m[0m "kms:Generate*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:sns:*:*:*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:GenerateDataKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m role        = (known after apply)
    }

[1m  # aws_kms_alias.a[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "a" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/my-key-alias"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # aws_kms_key.example[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "example" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "subnet-ip-address"
      [32m+[0m[0m enable_key_rotation                = false
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = (known after apply)
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m tags_all                           = (known after apply)
    }

[1m  # aws_kms_key_policy.key_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key_policy" "key_policy" {
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m policy                             = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "kms:*"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = "arn:aws:iam::837140532212:root"
                        }
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:GenerateDataKey",
                          [32m+[0m[0m "kms:Decrypt",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "cloudwatch.amazonaws.com"
                        }
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = [
                          [32m+[0m[0m "kms:Update*",
                          [32m+[0m[0m "kms:UntagResource",
                          [32m+[0m[0m "kms:TagResource",
                          [32m+[0m[0m "kms:ScheduleKeyDeletion",
                          [32m+[0m[0m "kms:Revoke*",
                          [32m+[0m[0m "kms:Put*",
                          [32m+[0m[0m "kms:List*",
                          [32m+[0m[0m "kms:Get*",
                          [32m+[0m[0m "kms:GenerateDataKey",
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Enable*",
                          [32m+[0m[0m "kms:Disable*",
                          [32m+[0m[0m "kms:Describe*",
                          [32m+[0m[0m "kms:Delete*",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:Create*",
                          [32m+[0m[0m "kms:CancelKeyDeletion",
                        ]
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = "arn:aws:iam::837140532212:root"
                        }
                      [32m+[0m[0m Resource  = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "kms:*"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m AWS = "arn:aws:iam::837140532212:root"
                        }
                      [32m+[0m[0m Resource  = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
    }

[1m  # aws_lambda_function.ip_usage_checker[0][0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "ip_usage_checker" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m filename                       = "./lambda_function1.zip"
      [32m+[0m[0m function_name                  = "ip-usage-checker-1"
      [32m+[0m[0m handler                        = "lambda_function1.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.8"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "9C3YxHFM1nx6u/r9i9bkLjBU5HKx0FTW5jTsFQhuUT8="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = (known after apply)
      [32m+[0m[0m timeout                        = 3
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }
    }

[1m  # aws_lambda_function.ip_usage_checker[1][0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "ip_usage_checker" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m filename                       = "./lambda_function2.zip"
      [32m+[0m[0m function_name                  = "ip-usage-checker-2"
      [32m+[0m[0m handler                        = "lambda_function2.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.8"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "8JNymvbknMEN2P/4Y5Hp0CYINQnIwUHWU56hZz9xt60="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = (known after apply)
      [32m+[0m[0m timeout                        = 3
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }
    }

[1m  # aws_lambda_permission.allow_cloudwatch_to_call_lambda[0][0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_cloudwatch_to_call_lambda" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = "ip-usage-checker-1"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "events.amazonaws.com"
      [32m+[0m[0m source_arn          = "arn:aws:events:ap-south-1:837140532212:rule/Event"
      [32m+[0m[0m statement_id        = "AllowExecutionFromCloudWatch_0"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # aws_lambda_permission.allow_cloudwatch_to_call_lambda[1][0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_cloudwatch_to_call_lambda" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = "ip-usage-checker-2"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "events.amazonaws.com"
      [32m+[0m[0m source_arn          = (known after apply)
      [32m+[0m[0m statement_id        = "AllowExecutionFromCloudWatch_1"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # aws_sns_topic.ip_usage_alert[0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic" "ip_usage_alert" {
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m beginning_archive_time      = (known after apply)
      [32m+[0m[0m content_based_deduplication = false
      [32m+[0m[0m fifo_topic                  = false
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m kms_master_key_id           = "alias/my-key-alias"
      [32m+[0m[0m name                        = "ip-usage-alerts"
      [32m+[0m[0m name_prefix                 = (known after apply)
      [32m+[0m[0m owner                       = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m signature_version           = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m tracing_config              = (known after apply)
    }

[1m  # aws_sns_topic_subscription.ip_usage_alert_subscription[0m will be created
[0m  [32m+[0m[0m resource "aws_sns_topic_subscription" "ip_usage_alert_subscription" {
      [32m+[0m[0m arn                             = (known after apply)
      [32m+[0m[0m confirmation_timeout_in_minutes = 1
      [32m+[0m[0m confirmation_was_authenticated  = (known after apply)
      [32m+[0m[0m endpoint                        = "venkatachalapathys1996@gmail.com"
      [32m+[0m[0m endpoint_auto_confirms          = false
      [32m+[0m[0m filter_policy_scope             = (known after apply)
      [32m+[0m[0m id                              = (known after apply)
      [32m+[0m[0m owner_id                        = (known after apply)
      [32m+[0m[0m pending_confirmation            = (known after apply)
      [32m+[0m[0m protocol                        = "email"
      [32m+[0m[0m raw_message_delivery            = false
      [32m+[0m[0m topic_arn                       = (known after apply)
    }

[1mPlan:[0m 22 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m subnet_cidr_blocks = [
      [32m+[0m[0m "172.31.16.0/20",
      [32m+[0m[0m "172.31.32.0/20",
      [32m+[0m[0m "172.31.0.0/20",
    ]
  [32m+[0m[0m vpc_name           = [
      [32m+[0m[0m {
          [32m+[0m[0m name   = "tag:Name"
          [32m+[0m[0m values = [
              [32m+[0m[0m "default",
            ]
        },
    ]
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
